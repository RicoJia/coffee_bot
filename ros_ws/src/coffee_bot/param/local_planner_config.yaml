
DWAPlannerROS:
  acc_lim_theta: 1.0   #On ROS documentation it's acc_lim_theta, actually this is what we use.
  acc_lim_x: 1.0
  max_vel_trans: 0.50
  min_vel_trans: 0.0

  max_vel_x: 0.32
  min_vel_x: 0.0

  # Differential-drive robot configuration
  max_vel_y: 0.0
  min_vel_y: 0.0
  acc_lim_y: 0.0

  max_rot_vel: 0.4
  min_rot_vel: 0.0

  yaw_goal_tolerance: 0.45      #Might increase this depending on need.
  xy_goal_tolerance: 0.15
#
  sim_granularity: 0.025
  sim_time: 3.5
  vx_samples: 40
  vy_samples: 0
  vth_samples: 20
#
  path_distance_bias: 10 #0.8
  goal_distance_bias: 1.5 #1.5
  occdist_scale: 0.001 #0.025

  forward_point_distance: 0.1 #0.325 #The distance from the center point of the robot to place an additional scoring point, in meters
#
  stop_time_buffer: 0.05   #The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  scaling_speed: 0.25     #The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  max_scaling_factor: 0.2 #The maximum factor to scale the robot's footprint by
#
  publish_cost_grid: false # When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the
  #cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
#
  oscillation_reset_dist: 0.45
  holonomic_robot: false



PoseFollower:

  k_trans: 1.2
  k_rot: 1.1

  tolerance_trans: 0.25  # These to should not be smaller than sim_time*min_vel/2 to not rotate in place much
  # tolerance_rot: 2.0 # previous value (not working with planner_interface)
  tolerance_rot: 0.3  # These to should not be smaller than sim_time*min_vel/2 to not rotate in place much
  tolerance_timeout: 0.25
  holonomic: false

  samples: 20

  #parameters for searching space around path in case of collision
  avoid_collisions: true
  theta_range: 1.6
  num_th_samples: 21

  #go no faster than this
  # max_vel_lin: 0.44
  # max_vel_th: 0.75

  max_vel_lin: 0.352
  max_vel_th: 0.3


  #minimum velocities to keep from getting stuck
  min_vel_lin: 0.2
  min_vel_th: 0.0

  #if we're rotating in place, go at least this fast to avoid getting stuck
  min_in_place_vel_th: 0.0

  #when we're near the end and would be trying to go no faster than this translationally, just rotate in place instead
  in_place_trans_vel: 0.09

  #we're "stopped" if we're going slower than these velocities
  trans_stopped_velocity: 0.1
  rot_stopped_velocity: 0.12

  #if this is true, we don't care whether we go backwards or forwards
  allow_backwards: false

  #if this is true, turn in place to face the new goal instead of arcing toward it
  turn_in_place_first: true

  #if turn_in_place_first is true, turn in place if our heading is more than this far from facing the goal location
  max_heading_diff_before_moving: 0.17

  oscillation_threshold: 4
  oscillation_duration: 5
  backed_up_thresh: 60
  # These are for base_local_planner package -- other parameters are not used in Posefollower
  heading_scoring: false
  holonomic_robot: false
  sim_time: 3.0
  sim_granularity: 0.1
  angular_sim_granularity_: 0.1
  #samples: 4 # Used in both
  vx_samples: 3
  vtheta_samples: 20 #may decrease this for slower theta reqs
  meter_scoring: true
  pdist_scale: 1.2
  gdist_scale: 0.8 #may decrease this for slower control speed
  occdist_scale: 0.05
  acc_lim_theta: 1.2
  acc_lim_x: 0.8
  acc_lim_y: 0.8

  max_vel_x: 0.35
  min_vel_x: 0.1
  max_rotational_vel: 0.4
  min_in_place_rotational_vel: 0.3