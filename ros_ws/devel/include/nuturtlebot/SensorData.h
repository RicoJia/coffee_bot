// Generated by gencpp from file nuturtlebot/SensorData.msg
// DO NOT EDIT!


#ifndef NUTURTLEBOT_MESSAGE_SENSORDATA_H
#define NUTURTLEBOT_MESSAGE_SENSORDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nuturtlebot
{
template <class ContainerAllocator>
struct SensorData_
{
  typedef SensorData_<ContainerAllocator> Type;

  SensorData_()
    : stamp()
    , left_encoder(0.0)
    , right_encoder(0.0)  {
    }
  SensorData_(const ContainerAllocator& _alloc)
    : stamp()
    , left_encoder(0.0)
    , right_encoder(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _left_encoder_type;
  _left_encoder_type left_encoder;

   typedef float _right_encoder_type;
  _right_encoder_type right_encoder;





  typedef boost::shared_ptr< ::nuturtlebot::SensorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nuturtlebot::SensorData_<ContainerAllocator> const> ConstPtr;

}; // struct SensorData_

typedef ::nuturtlebot::SensorData_<std::allocator<void> > SensorData;

typedef boost::shared_ptr< ::nuturtlebot::SensorData > SensorDataPtr;
typedef boost::shared_ptr< ::nuturtlebot::SensorData const> SensorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nuturtlebot::SensorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nuturtlebot::SensorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nuturtlebot::SensorData_<ContainerAllocator1> & lhs, const ::nuturtlebot::SensorData_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.left_encoder == rhs.left_encoder &&
    lhs.right_encoder == rhs.right_encoder;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nuturtlebot::SensorData_<ContainerAllocator1> & lhs, const ::nuturtlebot::SensorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nuturtlebot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nuturtlebot::SensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nuturtlebot::SensorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nuturtlebot::SensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nuturtlebot::SensorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuturtlebot::SensorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nuturtlebot::SensorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e11846fa8bcf550efab217e45ea9e19";
  }

  static const char* value(const ::nuturtlebot::SensorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e11846fa8bcf550ULL;
  static const uint64_t static_value2 = 0xefab217e45ea9e19ULL;
};

template<class ContainerAllocator>
struct DataType< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nuturtlebot/SensorData";
  }

  static const char* value(const ::nuturtlebot::SensorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float32 left_encoder\n"
"float32 right_encoder\n"
;
  }

  static const char* value(const ::nuturtlebot::SensorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nuturtlebot::SensorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.left_encoder);
      stream.next(m.right_encoder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nuturtlebot::SensorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nuturtlebot::SensorData_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "left_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<float>::stream(s, indent + "  ", v.right_encoder);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUTURTLEBOT_MESSAGE_SENSORDATA_H
